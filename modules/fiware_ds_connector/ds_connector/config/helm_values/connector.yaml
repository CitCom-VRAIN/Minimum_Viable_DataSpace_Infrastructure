# Source code:
# https://github.com/FIWARE/data-space-connector/blob/main/charts/data-space-connector/values.yaml


## Only for consumer role

keycloak:
  enabled: false

registration:
  enabled: false

## General configuration

dataSpaceConfig:
  # host name: dsconfig
  enabled: ${services_enabled.dsconfig}
  serviceType: ClusterIP
  port: 3002
  supportedModels:
    - "https://raw.githubusercontent.com/smart-data-models/dataModel.Consumption/master/ConsumptionPoint/schema.json"
    - "https://raw.githubusercontent.com/smart-data-models/dataModel.Consumption/master/ConsumptionCost/schema.json"
  supportedProtocols:
    - http
    - https
  authenticationProtocols:
    - oid4vp


################################################################################
# CREDENTIALS/VERIFIERS (Services)                                             #
################################################################################

# Configuration to be shared between the authentication components 
# (mysql databases).
authentication:
  # should a password for the database connection of authentication components
  # be generated in the cluster
  generatePasswords:
    enabled: ${services_enabled.generate_passwords}
    # name of the secret to put the generated password into
    secretName: ${mysql_config.secret}

# Configuration for the mysql to be deployed as part of the connector, 
# see https://github.com/bitnami/charts/tree/main/bitnami/mysql for all options.
mysql:
  enabled: ${services_enabled.mysql}
  fullnameOverride: ${mysql_host_name}
  primary:
    persistence:
      enabled: false
  secondary:
    persistence:
      enabled: false
  auth:
    existingSecret: ${mysql_config.secret}
  initdbScripts:
    # scripts to be executed on db startup
    create.sql: |
      CREATE DATABASE ${mysql_config.db_name_til};
      CREATE DATABASE ${mysql_config.db_name_ccs};

# Configuration for the credentials-config-service to be deployed as part of the
# connector, see https://github.com/FIWARE/helm-charts/tree/main/charts/credentials-config-service
# for all options.
credentials-config-service:
  enabled: ${services_enabled.ccs}
  fullnameOverride: ${ccs_host_name}
  database:
    persistence: true
    host: ${mysql_host_name}
    username: ${mysql_config.root_pass}
    name: ${mysql_config.db_name_ccs}
    existingSecret: 
      enabled: ${services_enabled.generate_passwords}
      name: ${mysql_config.secret}
      key: ${mysql_config.secret_key}

# Configuration for the trusted-issuers-list to be deployed as part of the 
# connector, see https://github.com/FIWARE/helm-charts/tree/main/charts/trusted-issuers-list
# for all options.
trusted-issuers-list:
  enabled: ${services_enabled.til}
  fullnameOverride: ${til_host_name}
  #! INGRESS: only open for clean up in the tests
  ingress:
    til:
      enabled: ${ingress_enabled.til}
      annotations:
        kubernetes.io/ingress.class: ${ingress_class} 
        # forcing everything to use ssl
        ingress.kubernetes.io/ssl-redirect: "true"
        # example annotations, allowing cert-manager to automatically create tls-certs
        kubernetes.io/tls-acme: "true"
      hosts:
        - host: ${til_domain}
          paths:
            - /
      # tls:
      #   - secretName: ${til_secret_tls}
      #     hosts:
      #       - ${til_domain}
  database:
    persistence: true
    host: ${mysql_host_name}
    username: ${mysql_config.root_pass}
    name: ${mysql_config.db_name_til}
    existingSecret: 
      enabled: ${services_enabled.generate_passwords}
      name: ${mysql_config.secret}
      key: ${mysql_config.secret_key}

# Configuration to be shared between the issuance components.
issuance:
  generatePasswords:
    enabled: ${services_enabled.generate_passwords}
    secretName: ${iss_secret}

# Configuration for the did-helper, should only be used for demonstrational 
# deployments, see https://github.com/wistefan/did-helper.
did:
  enabled: ${services_enabled.did}
  # fullnameOverride: ${did_host_name} NOT AVAILABLE, default name: did-helper
  ingress:
    enabled: ${ingress_enabled.did}
    annotations:
      kubernetes.io/ingress.class: ${ingress_class} 
      # forcing everything to use ssl
      ingress.kubernetes.io/ssl-redirect: "true"
      # example annotations, allowing cert-manager to automatically create tls-certs
      kubernetes.io/tls-acme: "true"
    hosts:
      - host: ${did_domain}
        paths:
          - /
    # tls:
    #   - secretName: ${did_secret_tls}
    #     hosts:
    #       - ${did_domain}
  secret: ${iss_secret}
  serviceType: ClusterIP
  port: ${did_config.port}
  cert:
    country: ${did_config.country}
    state: ${did_config.state}
    locality: ${did_config.locality}
    organization: ${did_config.organization}
    commonName: ${did_config.common_name}

# Configuration for the vcverifier to be deployed as part of the connector, 
# see https://github.com/FIWARE/helm-charts/tree/main/charts/vcverifier for all options.
vcverifier:
  enabled: ${services_enabled.vcv}
  fullnameOverride: ${vcv_host_name}
  ingress:
    enabled: ${ingress_enabled.vcv}
    annotations:
      kubernetes.io/ingress.class: ${ingress_class} 
      # forcing everything to use ssl
      ingress.kubernetes.io/ssl-redirect: "true"
      # example annotations, allowing cert-manager to automatically create tls-certs
      kubernetes.io/tls-acme: "true"
    hosts:
      - host: ${vcv_domain}
        paths:
          - /
    # tls:
    #   - secretName: ${vcv_secret_tls}
    #     hosts:
    #       - ${vcv_domain}
  deployment:
    logging:
      level: DEBUG
    server:
      host: http://${vcv_domain}:8080
    ${vcv_host_name}:
      tirAddress: http://tir.ds-operator.local:8080/ # tir data space operator
      did: $${DID}
    configRepo:
      configEndpoint: http://${ccs_host_name}:8080
    alternativeConfig: /alternative-conf/server.yaml
    additionalVolumes:
      - name: did-material
        emptyDir: {}
      - name: alternative-conf
        emptyDir: {}
    additionalVolumeMounts:
      - name: alternative-conf
        mountPath: /alternative-conf
    initContainers:
      - name: get-did
        image: ubuntu
        command:
          - /bin/bash
        args:
          - -ec
          - |
            #!/bin/bash
            apt-get -y update; apt-get -y install wget; apt-get -y install gettext-base
            cd /did-material
            wget http://${did_host_name}:3002/did-material/did.env
            export $(cat /did-material/did.env)
            cp /original-conf/server.yaml /alternative-conf/server.yaml
            envsubst < /alternative-conf/server.yaml
        volumeMounts:
          - name: did-material
            mountPath: /did-material
          - name: config-volume
            mountPath: /original-conf
          - name: alternative-conf
            mountPath: /alternative-conf

      - name: register-at-tir
        image: ubuntu
        command:
          - /bin/bash
        args:
          - -ec
          - |
            #!/bin/bash
            source /did-material/did.env
            apt-get -y update; apt-get -y install curl
            curl -X 'POST' 'http://${til_operator_domain}:8080/issuer' -H 'Content-Type: application/json' -d "{\"did\": \"$${DID}\", \"credentials\": []}"
        volumeMounts:
          - name: did-material
            mountPath: /did-material


################################################################################
# PROXY                                                                        #
################################################################################

postgresql:
  generatePasswords:
    enabled: ${services_enabled.generate_passwords}
    secretName: ${postgresql_config.secret}
  
  enabled: ${services_enabled.postgresql}
  fullnameOverride: ${postgresql_host_name}
  # configure authentication to mysql
  auth:
    # name of the secret to take the passowrds from
    existingSecret: ${postgresql_config.secret}
    # key of the secrets inside the secret
    secretKeys:
      adminPasswordKey: ${postgresql_secrect_key_adminpass}
      userPasswordKey: ${postgresql_secrect_key_userpass}
  # configuration for the primary of the db
  primary:
    persistence:
      enabled: false
    # scripts to be run on intialization
    initdb:
      scripts:
        create.sh: |
          psql postgresql://${postgresql_config.user_name}:$${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE ${postgresql_config.db_name};"
  readReplicas:
    persistence:
      enabled: false

# Configuration for the odrl-pap to be deployed as part of the connector, 
# see https://github.com/FIWARE/helm-charts/tree/main/charts/odrl-pap for all options.
odrl-pap:
  enabled: ${services_enabled.pap}
  fullnameOverride: ${odrl_pap_host_name}
  ingress:
    enabled: ${ingress_enabled.pap}
    annotations:
      kubernetes.io/ingress.class: ${ingress_class} 
      # forcing everything to use ssl
      ingress.kubernetes.io/ssl-redirect: "true"
      # example annotations, allowing cert-manager to automatically create tls-certs
      kubernetes.io/tls-acme: "true"
    hosts:
      - host: ${odrl_pap_domain}
        paths:
          - /
    # tls:
    #   - secretName: ${odrl_pap_secret_tls}
    #     hosts:
    #       - ${odrl_pap_domain}
  deployment:
    initContainers:
      - name: get-did
        image: ubuntu
        command:
          - /bin/bash
        args:
          - -ec
          - |
            #!/bin/bash
            apt-get -y update; apt-get -y install wget
            cd /did-material
            wget http://${did_host_name}:3002/did-material/did.env
        volumeMounts:
          - name: did-material
            mountPath: /did-material
    additionalVolumes:
      - name: did-material
        emptyDir: {}
    additionalVolumeMounts:
      - name: did-material
        mountPath: /did-material
    command:
      - /bin/sh
    args:
      - -ec
      - |
        #!/bin/sh
        source /did-material/did.env
        export GENERAL_ORGANIZATION_DID=$DID
        ./application -Dquarkus.http.host=0.0.0.0
  database:
    username: postgres
    url: jdbc:postgresql://postgresql:5432/${postgresql_config.db_name}
    existingSecret:
      enabled: ${services_enabled.generate_passwords}
      name: ${postgresql_config.secret}
      key: ${postgresql_secrect_key_adminpass}

# Configuration for the open-policy-agent to be deployed as part of the connector
# fulfilling the role of the PDP, as a sidecar to apisix.
opa:
  enabled: ${services_enabled.opa}
  resourceUrl: http://${odrl_pap_host_name}:8080/bundles/service/v1
  port: ${opa_port}
  # pull delays for the policies bundle
  policies:
    minDelay: 2
    maxDelay: 4
  # pull delays for the methods bundle
  methods:
    minDelay: 1
    maxDelay: 3
  # pull delays for the data bundle
  data:
    minDelay: 1
    maxDelay: 15

# Configuration for apisix to be deployed as part of the connector, 
# see https://github.com/bitnami/charts/tree/main/bitnami/apisix for all options.
apisix:
  enabled: ${services_enabled.apisix_service}
  fullnameOverride: ${apisix_host_name}
  # service:
  #   type: ClusterIP
  image:
    debug: true
  # autoscaling:
  #   enabled: true
  #   version: v2
  #   minReplicas: 2
  #   maxReplicas: 5
  #   targetCPUUtilizationPercentage: 80
  #   targetMemoryUtilizationPercentage: 80
  dashboard:
    enabled: false
  controlPlane:
    enabled: true
  dataPlane:
    enabled: true
    ingress:
      enabled: ${ingress_enabled.apisix}
      annotations:
        kubernetes.io/ingress.class: ${ingress_class} 
        # forcing everything to use ssl
        ingress.kubernetes.io/ssl-redirect: "true"
        # example annotations, allowing cert-manager to automatically create tls-certs
        kubernetes.io/tls-acme: "true"
      hostname: ${apisix_domain}
      # tls:
      #   - secretName: ${apisix_secret_tls}
      #     hosts:
      #       - ${apisix_domain}
      extraHosts:
        - name: ${apisix_api_domain}
          path: /
  catchAllRoute:
    enabled: false
  routes: |-
    - uri: /.well-known/openid-configuration
      host: ${apisix_domain}
      upstream:
        nodes:
          ${vcv_host_name}:3000: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          uri: /services/data-service/.well-known/openid-configuration
    - uri: /.well-known/data-space-configuration
      upstream:
        nodes:
          dsconfig:3002: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          uri: /.well-known/data-space-configuration/data-space-configuration.json
        response-rewrite:
          headers:
            set:
              content-type: application/json
    - uri: /*
      host: ${apisix_domain}
      upstream:
        nodes:
          ${scorpio_host_name}:9090: 1
        type: roundrobin
      plugins:
        openid-connect:
          bearer_only: true
          use_jwks: true
          client_id: data-service
          client_secret: unused
          ssl_verify: false
          discovery: http://${vcv_host_name}:3000/services/data-service/.well-known/openid-configuration
        opa:
          host: "http://localhost:8181"
          policy: policy/main
          with_body: true
    - uri: /.well-known/openid-configuration
      host: ${apisix_api_domain}
      upstream:
        nodes:
          ${vcv_host_name}:3000: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          uri: /services/tmf-api/.well-known/openid-configuration
    - uri: /*
      host: ${apisix_api_domain}
      upstream:
        nodes:
          ${tmf_api_host_name}:8080: 1
        type: roundrobin
      plugins:
        openid-connect:
          bearer_only: true
          use_jwks: true
          client_id: contract-management
          client_secret: unused
          ssl_verify: false
          discovery: http://${vcv_host_name}:3000/services/tmf-api/.well-known/openid-configuration
        opa:
          host: "http://localhost:8181"
          policy: policy/main
          with_body: true

################################################################################
# BROKER                                                                       #
################################################################################

dataplane:
  generatePasswords:
    enabled: ${services_enabled.generate_passwords}
    secretName: ${postgis_config.secret}

# Configuration for the postgresql to be deployed as part of the connector, see 
# https://github.com/bitnami/charts/tree/main/bitnami/postgresql for all options.
postgis:
  enabled: ${services_enabled.postgis}
  fullnameOverride: ${postgis_host_name}
  nameOverride: ${postgis_host_name}
  auth:
    existingSecret: ${postgis_config.secret}
    secretKeys:
      adminPasswordKey: ${postgis_secrect_key_adminpass}
      userPasswordKey: ${postgis_secrect_key_userpass}
  primary:
    persistence:
      enabled: false
    initdb:
      scripts:
        # psql postgresql://${postgis_config.user_name}$(kubectl get secret ${postgis_config.secret} -o jsonpath="{.data.postgres-password}" | base64 --decode)@localhost:5432 -c "CREATE EXTENSION postgis;"
        enable.sh: |
          psql postgresql://${postgis_config.user_name}:$${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE EXTENSION postgis;"
          psql postgresql://${postgis_config.user_name}:$${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE ngb;"
  readReplicas:
    persistence:
      enabled: false

# Configuration of the context-broker
# see https://github.com/FIWARE/helm-charts/tree/main/charts/scorpio-broker-aaio for details.
scorpio:
  enabled: ${services_enabled.scorpio}
  fullnameOverride: ${scorpio_host_name}
  ingress:
    #! INGRESS: only open for clean up in the tests
    enabled: ${ingress_enabled.scorpio}
    annotations:
      kubernetes.io/ingress.class: ${ingress_class} 
      # forcing everything to use ssl
      ingress.kubernetes.io/ssl-redirect: "true"
      # example annotations, allowing cert-manager to automatically create tls-certs
      kubernetes.io/tls-acme: "true"
    hosts:
      - host: ${scorpio_domain}
        paths:
          - /
    # tls:
    #   - secretName: ${scorpio_secret_tls}
    #     hosts:
    #       - ${scorpio_domain}
  # configuration of the database to be used by broker
  db:
    dbhost: ${postgis_host_name}
    user: ${postgis_config.user_name}
    existingSecret:
      enabled: ${services_enabled.generate_passwords}
      name: ${postgis_config.secret}
      key: ${postgis_secrect_key_adminpass}
  # configuration to register the dataplane at the credentials-config-service
  ccs:
    endpoint: http://${ccs_host_name}:8080
    configMap: scorpio-registration
    id: data-service
    defaultOidcScope:
      name: default
    oidcScopes:
      default:
        - type: UserCredential
          trustedParticipantsLists:
            - http://${til_operator_domain}:8080
          trustedIssuersLists:
            - http://${til_host_name}:8080
      operator:
        - type: OperatorCredential
          trustedParticipantsLists:
            - http://${til_operator_domain}:8080
          trustedIssuersLists:
            - http://${til_host_name}:8080

################################################################################
# MARKETPLACE                                                                  #
################################################################################

# Configuration of the tm-forum-api - see 
# https://github.com/FIWARE/helm-charts/tree/main/charts/tm-forum-api for details.
tm-forum-api:
  enabled: ${services_enabled.tmf_api}
  fullnameOverride: ${tmf_api_host_name}
  defaultConfig:
    ngsiLd:
      url: http://${scorpio_host_name}:9090
    contextUrl: https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld
  ingress:
    enabled: ${ingress_enabled.tmf_api}
    annotations:
      kubernetes.io/ingress.class: ${ingress_class} 
      # forcing everything to use ssl
      ingress.kubernetes.io/ssl-redirect: "true"
      # example annotations, allowing cert-manager to automatically create tls-certs
      kubernetes.io/tls-acme: "true"
    hosts:
      - host: ${tmf_api_domain} # tm-forum-api.127.0.0.1.nip.io
        paths:
          - /
    # tls:
    #   - secretName: ${tmf_api_secret_tls}
    #     hosts:
    #       - ${tmf_api_domain}
  # enable the api proxy
  apiProxy:
    enabled: true
    service:
      # name to be used for the proxy service.
      nameOverride: ${tmf_api_host_name}-proxy
  
  # List of apis to be deployed:
  # - every api needs to define a name and image. Basepath is required when routes
  #   or ingress will be enabled. Beside that, they can overwrite the default-config
  #   by using the same keys.
  # - be aware: when you change the image repositrory or the tag for an api, you
  #   have to provide both values for the changes to take effect.
  apis:
    - name: party-catalog
      image: tmforum-party-catalog
      basePath: /tmf-api/party/v4

    - name: customer-bill-management
      image: tmforum-customer-bill-management
      basePath: /tmf-api/customerBillManagement/v4

    - name: customer-management
      image: tmforum-customer-management
      basePath: /tmf-api/customerManagement/v4

    - name: product-catalog
      image: tmforum-product-catalog
      basePath: /tmf-api/productCatalogManagement/v4

    - name: product-inventory
      image: tmforum-product-inventory
      basePath: /tmf-api/productInventory/v4

    - name: product-ordering-management
      image: tmforum-product-ordering-management
      basePath: /tmf-api/productOrderingManagement/v4

    - name: resource-catalog
      image: tmforum-resource-catalog
      basePath: /tmf-api/resourceCatalog/v4

    - name: resource-function-activation
      image: tmforum-resource-function-activation
      basePath: /tmf-api/resourceFunctionActivation/v4

    - name: resource-inventory
      image: tmforum-resource-inventory
      basePath: /tmf-api/resourceInventoryManagement/v4

    - name: service-catalog
      image: tmforum-service-catalog
      basePath: /tmf-api/serviceCatalogManagement/v4

  # redis caching
  redis:
    enabled: false
  
  registration:
    enabled: true
    # name to be used for the registration jobs
    name: ${tmf_api_host_name}-registration
    # configuration to register the dataplane at the credentials-config-service
    ccs:
      endpoint: http://${ccs_host_name}:8080
      # service id of the data-service to be used
      id: tmf-api
      # default scope to be created for the data plane
      defaultOidcScope:
        # name of the scope
        name: default
        # name of the default credential to be configured
        credentialType: UserCredential
        #! needs to be updated for the concrete dataspace
        trustedParticipantsLists: http://${til_operator_domain}:8080
        trustedIssuersLists: http://${til_host_name}:8080

# Configuration of the tm-forum-api - see 
# https://github.com/FIWARE/helm-charts/tree/main/charts/contract-management for details.
contract-management:
  enabled: false
