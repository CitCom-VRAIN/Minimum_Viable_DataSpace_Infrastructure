#* -----------------------------------------------------------------------------
#* Deployment parameters
#* -----------------------------------------------------------------------------
deployment:
  ## Default values for the deployment
  ## See https://github/Kong/charts/blob/kong-2.38.0/charts/kong/values.yaml
  # kong
  # minReadySeconds
  # serviceAccount
  # sidecarContainers
  # userDefinedVolumes
  # test
  # daemonset
  # hostNetwork
  # prefixDir
  # tmpDir
  hostname: "kong" #TODO: Set as variable

#* Override namepsace for Kong chart resources. By default, the chart creates 
#* resources in the release namespace.
#* This may not be desirable when using this chart as a dependency.
namespace: "ds-operator" #TODO: Set as variable

#* -----------------------------------------------------------------------------
#* Kong parameters
#* -----------------------------------------------------------------------------

#* Specify Kong configuration
#* This chart takes all entries defined under `.env` and transforms them into into `KONG_*`
#* environment variables for Kong containers.
#* Their names here should match the names used in https://github.com/Kong/kong/blob/master/kong.conf.default
#* See https://docs.konghq.com/latest/configuration also for additional details
#* Values here take precedence over values from other sections of values.yaml,
#* e.g. setting pg_user here will override the value normally set when postgresql.enabled
#* is set below. In general, you should not set values here if they are set elsewhere.
env:
  database: "off" #default
  # the chart uses the traditional router (for Kong 3.x+) because the ingress
  # controller generates traditional routes. if you do not use the controller,
  # you may set this to "traditional_compatible" or "expressions" to use the new
  # DSL-based router
  router_flavor: "traditional" 
  nginx_worker_processes: "2" #default
  proxy_access_log: /dev/stdout #default
  admin_access_log: /dev/stdout #default
  admin_gui_access_log: /dev/stdout #default
  portal_api_access_log: /dev/stdout #default
  proxy_error_log: /dev/stderr #default
  admin_error_log: /dev/stderr #default
  admin_gui_error_log: /dev/stderr #default
  portal_api_error_log: /dev/stderr #default
  prefix: /kong_prefix/ #default
  log_level: debug
  nginx_proxy_large_client_header_buffers: "16 128k"
  nginx_proxy_http2_max_field_size: "32k"
  nginx_proxy_http2_max_header_size: "32k"
  pluginserver_names: pep-plugin
  pluginserver_pep_plugin_start_cmd: "/go-plugins/pep-plugin"
  pluginserver_pep_plugin_query_cmd: "/go-plugins/pep-plugin -dump"
  plugins: bundled,pep-plugin,ngsi-ishare-policies #! ngsi-ishare-policies??

## Default values for the deployment
## See https://github/Kong/charts/blob/kong-2.38.0/charts/kong/values.yaml
# customEnv
# envFrom
# extraLabels

#* Specify Kong's Docker image and repository details here
image:
  # # Official Kong helm chart example: https://github/Kong/charts/blob/kong-2.38.0/charts/kong/values.yaml
  # repository: kong
  # tag: "3.6"
  # FIWARE example: https://github/FIWARE-Ops/fiware-gitops/tree/master/aws/dsba
  repository: quay.io/fiware/kong
  tag: "0.5.7"
  pullPolicy: IfNotPresent

#* Specify Kong admin API service and listener configuration
admin:
  # Enable creating a Kubernetes service for the admin API
  # Disabling this is recommended for most ingress controller configurations
  # Enterprise users that wish to use Kong Manager with the controller should enable this
  enabled: true # default: false
  type: ClusterIP # default: NodePort
  ## Default values for the deployment
  ## See https://github/Kong/charts/blob/kong-2.38.0/charts/kong/values.yaml
  # loadBalancerClass
  # annotations
  # labels

  http:
    # servicePort: 8001 
    # containerPort: 8001
    # parameters
    # Enable plaintext HTTP listen for the admin API
    # Disabling this and using a TLS listen only is recommended for most configuration
    enabled: false #! fiware: true
  tls:
    # Enable HTTPS listen for the admin API
    enabled: true
    servicePort: 8444
    containerPort: 8444
    # Set a target port for the TLS port in the admin API service, useful when using TLS
    # termination on an ELB.
    # overrideServiceTargetPort: 8000
    # Set a nodePort which is available if service type is NodePort
    # nodePort: 32443
    # Additional listen parameters, e.g. "reuseport", "backlog=16384"
    parameters:
    - http2
    # Specify the CA certificate to use for TLS verification of the Admin API client by:
    # - secretName - the secret must contain a key named "tls.crt" with the PEM-encoded certificate.
    # - caBundle (PEM-encoded certificate string).
    # If both are set, caBundle takes precedence.
    client:
      secretName: "ca-cert-manager" #TODO: Set as variable
      # caBundle: ""

  #* Kong admin ingress settings. Useful if you want to expose the Admin
  #* API of Kong outside the k8s cluster.
  ingress:
    # Enable/disable exposure using ingress.
    enabled: true
    # ingressClassName: "ingress-nginx" #TODO: Set as variable # "k8s.io/ingress-nginx"
    # Map of ingress annotations.
    annotations:
      kubernetes.io/ingress.class: "nginx"
      # forcing everything to use ssl
      ingress.kubernetes.io/ssl-redirect: "true"
      # example annotations, allowing cert-manager to automatically create tls-certs
      kubernetes.io/tls-acme: "true"
    # Each path in an Ingress is required to have a corresponding path type. (ImplementationSpecific/Exact/Prefix)
    pathType: ImplementationSpecific
    # # Ingress hostname
    # hostname: "kong.ds-operator.io" #TODO: Set as variable
    # # Ingress path.
    # path: /
    # Ingress hosts. Use this instead of or in combination with hostname to specify multiple ingress host configurations
    hosts:
      - host: "kong.ds-operator.io" #TODO: Set as variable
        paths:
        - /
    # TLS secret name.
    tls: "$kong-tls-secret" #TODO: Set as variable
    

#* Specify Kong status listener configuration
#* This listen is internal-only. It cannot be exposed through a service or ingress.
status:
  enabled: true
  # tls:
  #   # Enable HTTPS listen for the status listen
  #   # Kong versions prior to 2.1 do not support TLS status listens.
  #   # This setting must remain false on those versions
  #   enabled: false
  #   containerPort: 8543
  #   parameters: []
  http:
    # Enable plaintext HTTP listen for the status listen
    enabled: true
    containerPort: 8100
    parameters: []

# Name the kong hybrid cluster CA certificate secret
# clusterCaSecretName: ""

# # Specify Kong cluster service and listener configuration
# #
# # The cluster service *must* use TLS. It does not support the "http" block
# # available on other services.
# #
# # The cluster service cannot be exposed through an Ingress, as it must perform
# # TLS client validation directly and is not compatible with TLS-terminating
# # proxies. If you need to expose it externally, you must use "type:
# # LoadBalancer" and use a TCP-only load balancer (check your Kubernetes
# # provider's documentation, as the configuration required for this varies).
# cluster:
#   enabled: false
#   # To specify annotations or labels for the cluster service, add them to the respective
#   # "annotations" or "labels" dictionaries below.
#   annotations: {}
#   #  service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
#   labels: {}

#   tls:
#     enabled: false
#     servicePort: 8005
#     containerPort: 8005
#     parameters: []

#   type: ClusterIP
#   loadBalancerClass:

#   # Kong cluster ingress settings. Useful if you want to split CP and DP
#   # in different clusters.
#   ingress:
#     # Enable/disable exposure using ingress.
#     enabled: false
#     ingressClassName:
#     # TLS secret name.
#     # tls: kong-cluster.example.com-tls
#     # Ingress hostname
#     hostname:
#     # Map of ingress annotations.
#     annotations: {}
#     # Ingress path.
#     path: /
#     # Each path in an Ingress is required to have a corresponding path type. (ImplementationSpecific/Exact/Prefix)
#     pathType: ImplementationSpecific

#* Specify Kong proxy service configuration
proxy:
  # Enable creating a Kubernetes service for the proxy
  enabled: true
  type: ClusterIP # default: LoadBalancer
  # loadBalancerClass:
  # # Override proxy Service name
  # nameOverride: ""
  # # To specify annotations or labels for the proxy service, add them to the respective
  # # "annotations" or "labels" dictionaries below.
  # annotations: {}
  # # If terminating TLS at the ELB, the following annotations can be used
  # # "service.beta.kubernetes.io/aws-load-balancer-backend-protocol": "*",
  # # "service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled": "true",
  # # "service.beta.kubernetes.io/aws-load-balancer-ssl-cert": "arn:aws:acm:REGION:ACCOUNT:certificate/XXXXXX-XXXXXXX-XXXXXXX-XXXXXXXX",
  # # "service.beta.kubernetes.io/aws-load-balancer-ssl-ports": "kong-proxy-tls",
  # # "service.beta.kubernetes.io/aws-load-balancer-type": "elb"
  labels:
    enable-metrics: "true"

  http:
    # Enable plaintext HTTP listen for the proxy
    enabled: true
    servicePort: 80
    containerPort: 8000
    # Set a nodePort which is available if service type is NodePort
    # nodePort: 32080
    # Additional listen parameters, e.g. "reuseport", "backlog=16384"
    parameters: []
  
  tls:
    # Enable HTTPS listen for the proxy
    enabled: true
    servicePort: 443
    containerPort: 8443
    # Set a target port for the TLS port in proxy service
    # overrideServiceTargetPort: 8000
    # Set a nodePort which is available if service type is NodePort
    # nodePort: 32443
    # Additional listen parameters, e.g. "reuseport", "backlog=16384"
    parameters:
    - http2
    # Specify the Service's TLS port's appProtocol. This can be useful when integrating with
    # external load balancers that require the `appProtocol` field to be set (e.g. GCP).
    # appProtocol: ""

  # # Define stream (TCP) listen
  # # To enable, remove "[]", uncomment the section below, and select your desired
  # # ports and parameters. Listens are dynamically named after their containerPort,
  # # e.g. "stream-9000" for the below.
  # # Note: although you can select the protocol here, you cannot set UDP if you
  # # use a LoadBalancer Service due to limitations in current Kubernetes versions.
  # # To proxy both TCP and UDP with LoadBalancers, you must enable the udpProxy Service
  # # in the next section and place all UDP stream listen configuration under it.
  # stream: []
  #   #   # Set the container (internal) and service (external) ports for this listen.
  #   #   # These values should normally be the same. If your environment requires they
  #   #   # differ, note that Kong will match routes based on the containerPort only.
  #   # - containerPort: 9000
  #   #   servicePort: 9000
  #   #   protocol: TCP
  #   #   # Optionally set a static nodePort if the service type is NodePort
  #   #   # nodePort: 32080
  #   #   # Additional listen parameters, e.g. "ssl", "reuseport", "backlog=16384"
  #   #   # "ssl" is required for SNI-based routes. It is not supported on versions <2.0
  #   #   parameters: []

  # Kong proxy ingress settings.
  # Note: You need this only if you are using another Ingress Controller
  # to expose Kong outside the k8s cluster.
  
  ingress:
    enabled: true # default: false
    # ingressClassName:
    # To specify annotations or labels for the ingress, add them to the respective
    # "annotations" or "labels" dictionaries below.
    annotations:
      kubernetes.io/ingress.class: "nginx"
      # forcing everything to use ssl
      ingress.kubernetes.io/ssl-redirect: "true"
      # example annotations, allowing cert-manager to automatically create tls-certs
      kubernetes.io/tls-acme: "true"
    # Each path in an Ingress is required to have a corresponding path type (when used with hostname above). (ImplementationSpecific/Exact/Prefix)
    pathType: ImplementationSpecific
    # # Ingress hostname
    # hostname: "kong.ds-operator.io" #TODO: Set as variable
    # # Ingress path (when used with hostname above).
    # path: /
    # Ingress hosts. Use this instead of or in combination with hostname to specify multiple ingress host configurations
    hosts:
      - host: "kong.ds-operator.io" #TODO: Set as variable
        paths:
        - /
    # TLS secret(s)
    tls: "$kong-tls-secret" #TODO: Set as variable

#* Specify Kong UDP proxy service configuration
#* Currently, LoadBalancer type Services are generally limited to a single transport protocol
#* Multi-protocol Services are an alpha feature as of Kubernetes 1.20:
#* https://kubernetes.io/docs/concepts/services-networking/service/#load-balancers-with-mixed-protocol-types
#* You should enable this Service if you proxy UDP traffic, and configure UDP stream listens under it
udpProxy:
  # Enable creating a Kubernetes service for UDP proxying
  enabled: false

## Default values for the deployment
## See https://github/Kong/charts/blob/kong-2.38.0/charts/kong/values.yaml
# plugins: {}
# secretVolumes: []

# Enable/disable migration jobs, and set annotations for them
migrations:
  # Enable pre-upgrade migrations (run "kong migrations up")
  preUpgrade: true
  # Enable post-upgrade migrations (run "kong migrations finish")
  postUpgrade: true
  # Annotations to apply to migrations job pods
  # By default, these disable service mesh sidecar injection for Istio and Kuma,
  # as the sidecar containers do not terminate and prevent the jobs from completing
  annotations:
    sidecar.istio.io/inject: false
  # Additional annotations to apply to migration jobs
  # This is helpful in certain non-Helm installation situations such as GitOps
  # where additional control is required around this job creation.
  jobAnnotations: {}
  # Optionally set a backoffLimit. If none is set, Jobs will use the cluster default
  backoffLimit:
  resources: {}
  # Example reasonable setting for "resources":
  # resources:
  #   limits:
  #     cpu: 100m
  #     memory: 256Mi
  #   requests:
  #     cpu: 50m
  #     memory: 128Mi
  ## Optionally specify any extra sidecar containers to be included in the deployment
  ## See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#container-v1-core
  ## Keep in mind these containers should be terminated along with the main
  ## migration containers
  # sidecarContainers:
  #   - name: sidecar
  #     image: sidecar:latest

# Kong's configuration for DB-less mode
# Note: Use this section only if you are deploying Kong in DB-less mode
# and not as an Ingress Controller.
#! dblessConfig:
#!   configMap: kong-one-configmap
dblessConfig:
  # Either Kong's configuration is managed from an existing ConfigMap (with Key: kong.yml)
  # configMap: ""
  # Or Kong's configuration is managed from an existing Secret (with Key: kong.yml)
  # secret: ""
  # Or the configuration is passed in full-text below
  config: |
    _format_version: "2.1"
    _transform: true
    consumers:
    - username: token-consumer #! ??
      keyauth_credentials:
      - tags: #! ??
        - token-key
        - tir-key
    services:
      - host: "orionld" #TODO: Set as variable
        name: "orion" #! namespace?? #TODO: Set as variable
        port: 1026
        protocol: http
        routes:
          - name: orion #! ??
            paths:
              - /orion #! ??
            strip_path: true
        plugins:
          - name: pep-plugin
            config:
              pathprefix: "/orion" #! ??
              authorizationendpointtype: ExtAuthz
              authorizationendpointaddress: http://pdp:8080/authz
          - name: request-transformer
            config:
              remove:
                headers:
                  - Authorization
                  - authorization
  ## Optionally specify any extra sidecar containers to be included in the
  ## migration jobs
  ## See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#container-v1-core
  # sidecarContainers:
  #   - name: sidecar
  #     image: sidecar:latest

# -----------------------------------------------------------------------------
# Ingress Controller parameters
# -----------------------------------------------------------------------------

# Kong Ingress Controller's primary purpose is to satisfy Ingress resources
# created in k8s. It uses CRDs for more fine grained control over routing and
# for Kong specific configuration.
ingressController:
  enabled: false # default: true

# -----------------------------------------------------------------------------
# Postgres sub-chart parameters
# -----------------------------------------------------------------------------

# Kong can run without a database or use either Postgres or Cassandra
# as a backend datatstore for it's configuration.
# By default, this chart installs Kong without a database.

# If you would like to use a database, there are two options:
# - (recommended) Deploy and maintain a database and pass the connection
#   details to Kong via the `env` section.
# - You can use the below `postgresql` sub-chart to deploy a database
#   along-with Kong as part of a single Helm release. Running a database
#   independently is recommended for production, but the built-in Postgres is
#   useful for quickly creating test instances.

# PostgreSQL chart documentation:
# https://github.com/bitnami/charts/blob/master/bitnami/postgresql/README.md
#
# WARNING: by default, the Postgres chart generates a random password each
# time it upgrades, which breaks access to existing volumes. You should set a
# password explicitly:
# https://github.com/Kong/charts/blob/main/charts/kong/FAQs.md#kong-fails-to-start-after-helm-upgrade-when-postgres-is-used-what-do-i-do

postgresql:
  enabled: false

#* -----------------------------------------------------------------------------
#* Configure cert-manager integration
#* -----------------------------------------------------------------------------

certificates:
  enabled: false

#* -----------------------------------------------------------------------------
#* Miscellaneous parameters
#* -----------------------------------------------------------------------------

waitImage:
  # Wait for the database to come online before starting Kong or running migrations
  # If Kong is to access the database through a service mesh that injects a sidecar to
  # Kong's container, this must be disabled. Otherwise there'll be a deadlock:
  # InitContainer waiting for DB access that requires the sidecar, and the sidecar
  # waiting for InitContainers to finish.
  enabled: true
  # Optionally specify an image that provides bash for pre-migration database
  # checks. If none is specified, the chart uses the Kong image. The official
  # Kong images provide bash
  # repository: bash
  # tag: 5
  pullPolicy: IfNotPresent

# update strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: "100%"
    maxUnavailable: "0%"

# If you want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
resources:
  limits:
   cpu: 1
   memory: 2G
  requests:
   cpu: 1
   memory: 2G

# readinessProbe for Kong pods
readinessProbe:
  httpGet:
    path: "/status/ready"
    port: status
    scheme: HTTP
  initialDelaySeconds: 5
  timeoutSeconds: 5
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3

# livenessProbe for Kong pods
livenessProbe:
  httpGet:
    path: "/status"
    port: status
    scheme: HTTP
  initialDelaySeconds: 5
  timeoutSeconds: 5
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3

# startupProbe for Kong pods
# startupProbe:
#   httpGet:
#     path: "/status"
#     port: status
#     scheme: HTTP
#   initialDelaySeconds: 5
#   timeoutSeconds: 5
#   periodSeconds: 2
#   successThreshold: 1
#   failureThreshold: 40

# # Proxy container lifecycle hooks
# # Ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
# lifecycle:
#   preStop:
#     exec:
#       # kong quit has a default timeout of 10 seconds, and a default wait of 0 seconds.
#       # Note: together they should be less than the terminationGracePeriodSeconds setting below.
#       command:
#         - kong
#         - quit
#         - '--wait=15'

# Sets the termination grace period for pods spawned by the Kubernetes Deployment.
# Ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#hook-handler-execution
# terminationGracePeriodSeconds: 30

# Affinity for pod assignment
# Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
# affinity: {}

# Topology spread constraints for pod assignment (requires Kubernetes >= 1.19)
# Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
# topologySpreadConstraints: []

# Tolerations for pod assignment
# Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
# tolerations: []

# Node labels for pod assignment
# Ref: https://kubernetes.io/docs/user-guide/node-selection/
# nodeSelector: {}

# Annotation to be added to Kong pods
podAnnotations:
  # kuma.io/gateway: enabled
  # traffic.sidecar.istio.io/includeInboundPorts: ""
  prometheus.io/scrape: 'true'
  prometheus.io/port: '9102'

# # Labels to be added to Kong pods
# podLabels: {}

# Kong pod count.
# It has no effect when autoscaling.enabled is set to true
replicaCount: 1

# Annotations to be added to Kong deployment
# deploymentAnnotations: {}

# Enable autoscaling using HorizontalPodAutoscaler
# When configuring an HPA, you must set resource requests on all containers via
# "resources" and, if using the controller, "ingressController.resources" in values.yaml
autoscaling:
  enabled: false

# Kong Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  # Uncomment only one of the following when enabled is set to true
  # maxUnavailable: "50%"
  # minAvailable: "50%"

podSecurityPolicy:
  enabled: false

# priorityClassName: ""

# # securityContext for Kong pods.
# securityContext: {}

# securityContext for containers.
containerSecurityContext:
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  runAsUser: 1000
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault
  capabilities:
    drop:
    - ALL

## Optional DNS configuration for Kong pods
# dnsPolicy: ClusterFirst
# dnsConfig:
#   nameservers:
#   - "10.100.0.10"
#   options:
#   - name: ndots
#     value: "5"
#   searches:
#   - default.svc.cluster.local
#   - svc.cluster.local
#   - cluster.local
#   - us-east-1.compute.internal

serviceMonitor:
  # Specifies whether ServiceMonitor for Prometheus operator should be created
  # If you wish to gather metrics from a Kong instance with the proxy disabled (such as a hybrid control plane), see:
  # https://github.com/Kong/charts/blob/main/charts/kong/README.md#prometheus-operator-integration
  enabled: false
